openapi: 3.1.0
info:
  title: SlimBuddy API (Full Spec)
  version: 1.1.0
  description: >
    Public API for YourSlimBuddy. Authentication uses a short Connect Key
    sent in the header `X-Connect-Key: SB-XXXX-XXX-X-XXXX`.
servers:
  - url: https://slimbuddy-backend-production.up.railway.app

components:
  securitySchemes:
    connectKeyAuth:
      type: apiKey
      in: header
      name: X-Connect-Key

  schemas:
    BasicOK:
      type: object
      properties:
        ok: { type: boolean }
        message: { type: string }

    AuthEchoResponse:
      type: object
      properties:
        ok: { type: boolean }
        user:
          type: object
          additionalProperties: true

    WeightLogRequest:
      type: object
      required: [date, weight]     # unit optional; backend defaults to 'kg'
      properties:
        date:
          type: string
          description: YYYY-MM-DD
        weight:
          type: number
        unit:
          type: string
          description: Optional. One of kg, lb, st_lbs. Defaults to 'kg'.
          enum: [kg, lb, st_lbs]
        notes:
          type: string

    MealLogRequest:
      type: object
      required: [meal_description, syns]   # date optional (defaults to today)
      properties:
        date:
          type: string
          description: YYYY-MM-DD (optional; defaults to today)
        meal_description:
          type: string
        syns:
          type: number
        calories:
          type: number
        healthy_extra_a_used:
          type: boolean
        healthy_extra_b_used:
          type: boolean
        notes:
          type: string

    ExerciseLogRequest:
      type: object
      required: [activity]   # date optional (defaults to today)
      properties:
        date:
          type: string
          description: YYYY-MM-DD (optional; defaults to today)
        activity:
          type: string
        duration_minutes:
          type: integer
        intensity:
          type: string
        calories_burned:
          type: integer
        steps:
          type: integer
        distance_km:
          type: number
        notes:
          type: string

    MeasurementsRequest:
      type: object
      properties:
        date:
          type: string
          description: YYYY-MM-DD (optional; defaults to today)
        bust:        { type: number }
        waist:       { type: number }
        hips:        { type: number }
        thighs:      { type: number }
        neck:        { type: number }
        arm:         { type: number }
        under_bust:  { type: number }
        knees:       { type: number }
        ankles:      { type: number }
        notes:       { type: string }

    UserGoalRequest:
      type: object
      required: [goal_type, target_value]
      properties:
        goal_type:
          type: string
          enum: [weight_loss, maintain]
        target_value:
          type: number
          description: Target in kg
        target_date:
          type: string
          description: YYYY-MM-DD (optional)

    UpdateUserSettingsRequest:
      type: object
      additionalProperties: false
      properties:
        preferred_name: { type: string }
        tone: { type: string }
        preferred_weight_unit:
          type: string
          description: st_lbs | kg | lb
          enum: [st_lbs, kg, lb]
        diet_preference: { type: string }
        food_allergies: { type: string }
        food_dislikes: { type: string }
        typical_day: { type: string }
        healthy_extra_a: { type: string }
        healthy_extra_b: { type: string }
        syn_limit: { type: integer }
        target_weight:
          type: number
          description: kg
        maintenance_mode_enabled: { type: boolean }

    UpdateFoodValueRequest:
      type: object
      required: [food_name, syn_value]
      properties:
        food_name: { type: string }
        syn_value: { type: number }
        notes: { type: string }
        date:
          type: string
          description: YYYY-MM-DD (optional)

    WeightGraphResponse:
      type: object
      properties:
        user_id: { type: string }
        data:
          type: array
          items:
            type: object
            properties:
              date:   { type: string }
              weight: { type: number }

    UserProfileResponse:
      type: object
      properties:
        user_id: { type: string }

    ResetRequest:
      type: object
      required: [confirm]
      properties:
        confirm:
          type: string
          description: Must be "RESET"

security:
  - connectKeyAuth: []

paths:
  /api/ping:
    get:
      operationId: ping
      summary: Health check (no auth)
      security: []          # public
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/BasicOK" }

  /api/auth_echo:
    get:
      operationId: authEcho
      summary: Echo back resolved user from current Connect Key
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/AuthEchoResponse" }

  /api/log_weight:
    post:
      operationId: logWeight
      summary: Log a weight entry
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/WeightLogRequest" }
      responses:
        "200":
          description: OK

  /api/log_meal:
    post:
      operationId: logMeal
      summary: Log a meal
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/MealLogRequest" }
      responses:
        "200":
          description: OK

  /api/log_exercise:
    post:
      operationId: logExercise
      summary: Log an exercise entry
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/ExerciseLogRequest" }
      responses:
        "200":
          description: OK

  /api/log_measurements:
    post:
      operationId: logMeasurements
      summary: Log body measurements
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/MeasurementsRequest" }
      responses:
        "200":
          description: OK

  /api/user_goals:
    post:
      operationId: setUserGoal
      summary: Create or update a user goal
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/UserGoalRequest" }
      responses:
        "200":
          description: OK

  /api/update_user_settings:
    patch:
      operationId: updateUserSettings
      summary: Upsert user settings (send only fields that changed)
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/UpdateUserSettingsRequest" }
      responses:
        "200":
          description: OK

  /api/update_food_value:
    post:
      operationId: updateFoodValue
      summary: Add or correct a food Syn value
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/UpdateFoodValueRequest" }
      responses:
        "200":
          description: OK

  /api/weight_graph:
    get:
      operationId: getWeightGraph
      summary: Get weight graph data
      parameters:
        - in: query
          name: range
          required: false
          schema:
            type: string
            enum: [7d, 30d, 90d, 1y, all]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/WeightGraphResponse" }

  /api/user_profile:
    get:
      operationId: getUserProfile
      summary: Get current user profile (user_id only)
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/UserProfileResponse" }

  /api/reset:
    post:
      operationId: resetMyData
      summary: Delete all of my SlimBuddy data (profile, goals, and all logs)
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/ResetRequest" }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/BasicOK" }

