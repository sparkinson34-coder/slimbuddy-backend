openapi: 3.1.0
info:
  title: SlimBuddy API (Connect-Key Auth)
  version: 1.0.1
  description: >
    SlimBuddy API for GPT Actions.
    Authentication uses a short Connect Key sent in the header: X-Connect-Key: SB-XXXX-XXX-X-XXXX.
servers:
  - url: https://slimbuddy-backend-production.up.railway.app

components:
  securitySchemes:
    connectKeyAuth:
      type: apiKey
      in: header
      name: X-Connect-Key

  schemas:
    BasicOK:
      type: object
      properties:
        ok: { type: boolean }
        message: { type: string }

    WeightLogRequest:
      type: object
      required: [date, weight]   # backend requires date & weight; unit is optional (defaults to 'kg')
      properties:
        date: { type: string, description: "YYYY-MM-DD" }
        weight: { type: number }
        unit:
          type: string
          enum: [kg, st_lbs, lb]
          description: Optional. Defaults to 'kg' if not provided.
        notes: { type: string }

    MealLogRequest:
      type: object
      # date is optional — backend defaults to today if omitted
      required: [meal_description, syns]
      properties:
        date: { type: string, description: "YYYY-MM-DD (optional; defaults to today)" }
        meal_description: { type: string }
        syns: { type: number }
        calories: { type: number }
        healthy_extra_a_used: { type: boolean }
        healthy_extra_b_used: { type: boolean }
        notes: { type: string }

    ExerciseLogRequest:
      type: object
      # date is optional — backend defaults to today if omitted
      required: [activity]
      properties:
        date: { type: string, description: "YYYY-MM-DD (optional; defaults to today)" }
        activity: { type: string }
        duration_minutes: { type: integer }
        intensity: { type: string }
        calories_burned: { type: integer }
        steps: { type: integer }
        distance_km: { type: number }
        notes: { type: string }

    MeasurementsRequest:
      type: object
      # date is optional — backend defaults to today if omitted
      properties:
        date: { type: string, description: "YYYY-MM-DD (optional; defaults to today)" }
        bust: { type: number }
        waist: { type: number }
        hips: { type: number }
        thighs: { type: number }
        neck: { type: number }
        arm: { type: number }
        under_bust: { type: number }
        knees: { type: number }
        ankles: { type: number }
        notes: { type: string }

    UserGoalRequest:
      type: object
      # target_date can be optional based on backend schema/usage
      required: [goal_type, target_value]
      properties:
        goal_type: { type: string, enum: [weight_loss, maintain] }
        target_value: { type: number, description: "Target in kg" }
        target_date: { type: string, description: "YYYY-MM-DD (optional)" }

    UpdateUserSettingsRequest:
      type: object
      additionalProperties: false
      properties:
        preferred_name: { type: string }
        tone: { type: string }
        preferred_weight_unit: { type: string, enum: [st_lbs, kg, lb] }
        diet_preference: { type: string }
        food_allergies: { type: string }
        food_dislikes: { type: string }
        typical_day: { type: string }
        healthy_extra_a: { type: string }
        healthy_extra_b: { type: string }
        syn_limit: { type: integer }
        target_weight: { type: number, description: "kg" }
        maintenance_mode_enabled: { type: boolean }

    UpdateFoodValueRequest:
      type: object
      required: [food_name, syn_value]
      properties:
        food_name: { type: string }
        syn_value: { type: number }
        notes: { type: string }
        date: { type: string, description: "YYYY-MM-DD (optional)" }

    WeightGraphResponse:
      type: object
      properties:
        user_id: { type: string }
        data:
          type: array
          items:
            type: object
            properties:
              date: { type: string }
              weight: { type: number }

    UserProfileResponse:
      type: object
      properties:
        user_id: { type: string }

security:
  - connectKeyAuth: []

paths:
  /api/ping:
    get:
      operationId: ping
      summary: Health check (no auth)
      security: []   # override: make ping public
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/BasicOK" }

  /api/auth_echo:
    get:
      operationId: authEcho
      summary: Echo back resolved user from X-Connect-Key
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }
                  user:
                    type: object
                    additionalProperties: true

  /api/log_weight:
    post:
      operationId: logWeight
      summary: Log a weight entry
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/WeightLogRequest" }
      responses:
        "200": { description: OK }

  /api/log_meal:
    post:
      operationId: logMeal
      summary: Log a meal
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/MealLogRequest" }
      responses:
        "200": { description: OK }

  /api/log_exercise:
    post:
      operationId: logExercise
      summary: Log an exercise entry
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/ExerciseLogRequest" }
      responses:
        "200": { description: OK }

  /api/log_measurements:
    post:
      operationId: logMeasurements
      summary: Log measurements
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/MeasurementsRequest" }
      responses:
        "200": { description: OK }

  /api/user_goals:
    post:
      operationId: setUserGoal
      summary: Create or update a user goal
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/UserGoalRequest" }
      responses:
        "200": { description: OK }

  /api/update_user_settings:
    patch:
      operationId: updateUserSettings
      summary: Upsert user settings (only send changed fields)
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/UpdateUserSettingsRequest" }
      responses:
        "200": { description: OK }

  /api/update_food_value:
    post:
      operationId: updateFoodValue
      summary: Add or correct a food Syn value
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/UpdateFoodValueRequest" }
      responses:
        "200": { description: OK }

  /api/weight_graph:
    get:
      operationId: getWeightGraph
      summary: Get weight graph data
      parameters:
        - in: query
          name: range
          schema: { type: string, enum: [7d, 30d, 90d, 1y, all] }
          required: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/WeightGraphResponse" }

  /api/user_profile:
    get:
      operationId: getUserProfile
      summary: Get current user profile (user_id only)
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/UserProfileResponse" }

