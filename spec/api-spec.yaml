openapi: 3.1.0
info:
  title: SlimBuddy API
  version: 1.0.0
  description: >
    REST API for SlimBuddy. Protected calls require `Authorization: Bearer <user JWT>`
    (Supabase access_token). Do NOT configure global auth in Actions; the GPT should
    send this header per-request.

servers:
  - url: https://slimbuddy-backend-production.up.railway.app

components:
  schemas:
    ApiMessage:
      type: object
      properties:
        message: { type: string }
      additionalProperties: false

    ErrorResponse:
      type: object
      properties:
        error: { type: string }
      additionalProperties: false

    LogMealRequest:
      type: object
      required: [date, meal_description, syns]
      properties:
        date: { type: string, description: YYYY-MM-DD, example: "2025-08-13" }
        meal_type: { type: string, nullable: true, example: "Lunch" }
        meal_description: { type: string, example: "Chicken stir fry with soy sauce" }
        syns: { type: number, example: 3.5 }
        calories: { type: integer, nullable: true, example: 420 }
        healthy_extra_a_used: { type: boolean, nullable: true, example: false }
        healthy_extra_b_used: { type: boolean, nullable: true, example: false }
        notes: { type: string, nullable: true, example: "Used 1 tbsp soy sauce" }
      additionalProperties: false

    LogWeightRequest:
      type: object
      required: [date, weight, unit]
      properties:
        date: { type: string, description: YYYY-MM-DD, example: "2025-08-13" }
        weight: { type: number, example: 82.4 }
        unit:
          type: string
          description: Input unit; server stores kg
          enum: [kg, lb, st_lbs]
          example: kg
        notes: { type: string, nullable: true, example: "Post-workout weigh-in" }
      additionalProperties: false

    LogExerciseRequest:
      type: object
      required: [date, activity]
      properties:
        date: { type: string, description: YYYY-MM-DD, example: "2025-08-13" }
        activity: { type: string, example: "Walking" }
        duration_minutes: { type: integer, nullable: true, example: 45 }
        intensity: { type: string, nullable: true, example: "Moderate" }
        calories_burned: { type: number, nullable: true, example: 300 }
        steps: { type: integer, nullable: true, example: 7500 }
        distance_km: { type: number, nullable: true, example: 5.2 }
        notes: { type: string, nullable: true, example: "Morning walk in the park" }
      additionalProperties: false

    LogMeasurementsRequest:
      type: object
      required: [date]
      properties:
        date: { type: string, description: YYYY-MM-DD, example: "2025-08-13" }
        bust: { type: number, nullable: true, example: 92 }
        waist: { type: number, nullable: true, example: 75 }
        hips: { type: number, nullable: true, example: 98 }
        thighs: { type: number, nullable: true, example: 58 }
        neck: { type: number, nullable: true, example: 34 }
        arm: { type: number, nullable: true, example: 29 }
        under_bust: { type: number, nullable: true, example: 80 }
        knees: { type: number, nullable: true, example: 36 }
        ankles: { type: number, nullable: true, example: 23 }
        notes: { type: string, nullable: true, example: "Evening readings" }
      additionalProperties: false

    UserGoalsRequest:
      type: object
      required: [goal_type, target_value, target_date]
      properties:
        goal_type: { type: string, description: e.g., weight_loss or maintenance, example: "weight_loss" }
        target_value: { type: number, description: Target in kg, example: 79.38 }
        target_date: { type: string, description: YYYY-MM-DD, example: "2025-09-30" }
      additionalProperties: false

    UpdateUserSettingsRequest:
      type: object
      description: Send only fields that changed; server upserts.
      properties:
        preferred_name: { type: string, example: "Sharon" }
        tone: { type: string, example: "friendly" }
        preferred_weight_unit: { type: string, enum: [st_lbs, kg, lb], example: "st_lbs" }
        diet_preference: { type: string, example: "omnivore" }
        food_allergies: { type: string, example: "none" }
        food_dislikes: { type: string, example: "shellfish" }
        typical_day: { type: string, example: "Desk job, lunchtime walk" }
        healthy_extra_a: { type: string, example: "Low fat cheese" }
        healthy_extra_b: { type: string, example: "Oats" }
        syn_limit: { type: integer, example: 15 }
        target_weight: { type: number, description: kg, example: 65 }
        maintenance_mode_enabled: { type: boolean, example: false }
      additionalProperties: false

    UpdateFoodValueRequest:
      type: object
      required: [food_name, syn_value]
      properties:
        food_name: { type: string, example: "Weetabix Minis - Chocolate" }
        syn_value: { type: number, example: 6 }
        notes: { type: string, nullable: true, example: "Corrected from 4 to 6 Syns" }
        date: { type: string, nullable: true, description: YYYY-MM-DD, example: "2025-08-13" }
      additionalProperties: false

paths:
  /api/ping:
    get:
      operationId: ping
      summary: Health check (no auth)
      description: Returns simple status payload. No Authorization header required.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: { type: string, example: ok }
                  message: { type: string, example: SlimBuddy API is alive }
                  timestamp: { type: string, example: "2025-08-13T08:31:47.302Z" }

  /api/log_meal:
    post:
      operationId: logMeal
      summary: Log a meal/snack
      parameters:
        - name: Authorization
          in: header
          required: true
          description: Bearer JWT copied from the YourSlimBuddy login page.
          schema: { type: string, example: "Bearer eyJhbGciOi..." }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/LogMealRequest' }
      responses:
        '200': { description: Meal logged, content: { application/json: { schema: { $ref: '#/components/schemas/ApiMessage' } } } }
        '400': { description: Bad request, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '401': { description: Unauthorized, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }

  /api/log_weight:
    post:
      operationId: logWeight
      summary: Log a weight entry
      parameters:
        - name: Authorization
          in: header
          required: true
          description: Bearer JWT copied from the YourSlimBuddy login page.
          schema: { type: string, example: "Bearer eyJhbGciOi..." }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/LogWeightRequest' }
      responses:
        '200': { description: Weight logged, content: { application/json: { schema: { $ref: '#/components/schemas/ApiMessage' } } } }
        '400': { description: Bad request, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '401': { description: Unauthorized, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }

  /api/log_exercise:
    post:
      operationId: logExercise
      summary: Log an exercise session
      parameters:
        - name: Authorization
          in: header
          required: true
          description: Bearer JWT copied from the YourSlimBuddy login page.
          schema: { type: string, example: "Bearer eyJhbGciOi..." }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/LogExerciseRequest' }
      responses:
        '200': { description: Exercise logged, content: { application/json: { schema: { $ref: '#/components/schemas/ApiMessage' } } } }
        '400': { description: Bad request, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '401': { description: Unauthorized, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }

  /api/log_measurements:
    post:
      operationId: logMeasurements
      summary: Log body measurements (cm)
      parameters:
        - name: Authorization
          in: header
          required: true
          description: Bearer JWT copied from the YourSlimBuddy login page.
          schema: { type: string, example: "Bearer eyJhbGciOi..." }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/LogMeasurementsRequest' }
      responses:
        '200': { description: Measurements logged, content: { application/json: { schema: { $ref: '#/components/schemas/ApiMessage' } } } }
        '400': { description: Bad request, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '401': { description: Unauthorized, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }

  /api/user_goals:
    post:
      operationId: setUserGoal
      summary: Create/update a goal (target stored as kg)
      parameters:
        - name: Authorization
          in: header
          required: true
          description: Bearer JWT copied from the YourSlimBuddy login page.
          schema: { type: string, example: "Bearer eyJhbGciOi..." }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/UserGoalsRequest' }
      responses:
        '200': { description: Goal saved, content: { application/json: { schema: { $ref: '#/components/schemas/ApiMessage' } } } }
        '400': { description: Bad request, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '401': { description: Unauthorized, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }

  /api/update_user_settings:
    patch:
      operationId: updateUserSettings
      summary: Update (upsert) user profile/settings
      parameters:
        - name: Authorization
          in: header
          required: true
          description: Bearer JWT copied from the YourSlimBuddy login page.
          schema: { type: string, example: "Bearer eyJhbGciOi..." }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/UpdateUserSettingsRequest' }
      responses:
        '200': { description: Settings saved, content: { application/json: { schema: { $ref: '#/components/schemas/ApiMessage' } } } }
        '400': { description: Bad request, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '401': { description: Unauthorized, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }

  /api/update_food_value:
    post:
      operationId: updateFoodValue
      summary: Create/update a Syn value entry
      parameters:
        - name: Authorization
          in: header
          required: true
          description: Bearer JWT copied from the YourSlimBuddy login page.
          schema: { type: string, example: "Bearer eyJhbGciOi..." }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/UpdateFoodValueRequest' }
      responses:
        '200': { description: Syn value saved, content: { application/json: { schema: { $ref: '#/components/schemas/ApiMessage' } } } }
        '400': { description: Bad request, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '401': { description: Unauthorized, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }

  /api/weight_graph:
    get:
      operationId: getWeightGraph
      summary: Get weight entries (optionally scoped by range)
      parameters:
        - name: Authorization
          in: header
          required: true
          description: Bearer JWT copied from the YourSlimBuddy login page.
          schema: { type: string, example: "Bearer eyJhbGciOi..." }
        - name: range
          in: query
          required: false
          description: Optional time range window.
          schema:
            type: string
            enum: [7d, 30d, 90d, 1y, all]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  user_id: { type: string }
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        date: { type: string, example: "2025-08-13" }
                        weight: { type: number, example: 82.4 }
        '401': { description: Unauthorized, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }

  /api/user_profile:
    get:
      operationId: getUserProfile
      summary: Return the current user's id (from token)
      parameters:
        - name: Authorization
          in: header
          required: true
          description: Bearer JWT copied from the YourSlimBuddy login page.
          schema: { type: string, example: "Bearer eyJhbGciOi..." }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  user_id: { type: string, example: "ca2a7bd6-cfc4-428a-b643-746d83414b16" }
        '401': { description: Unauthorized, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
