openapi: 3.1.0
info:
  title: SlimBuddy API
  version: "1.0.0"
  description: >
    REST API for SlimBuddy. All endpoints (except /api/ping) require a Bearer JWT
    (Supabase access_token). Dates prefer YYYY-MM-DD; server also accepts DD/MM/YYYY
    and DD-MM-YYYY and normalizes them.

servers:
  - url: https://slimbuddy-backend-production.up.railway.app

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    ApiMessage:
      type: object
      properties:
        message:
          type: string
    Error:
      type: object
      properties:
        error:
          type: string
    WeightLogRequest:
      type: object
      required: [date, weight, unit]
      properties:
        date:
          type: string
          description: YYYY-MM-DD (UK formats accepted)
        weight:
          type: number
          format: float
        unit:
          type: string
          enum: [kg, lbs, st_lbs]
        notes:
          type: string
    MealLogRequest:
      type: object
      required: [date, meal_description, syns]
      properties:
        date: { type: string }
        meal_description: { type: string }
        syns: { type: number }
        calories:
          type: number
          description: Optional calorie estimate
        notes: { type: string }
    ExerciseLogRequest:
      type: object
      required: [date, activity]
      properties:
        date: { type: string }
        activity: { type: string }
        duration_minutes: { type: number }
        intensity: { type: string }
        calories_burned: { type: number }
        steps: { type: number }
        distance_km: { type: number }
        notes: { type: string }
    MeasurementsLogRequest:
      type: object
      required: [date]
      properties:
        date: { type: string }
        bust: { type: number }
        waist: { type: number }
        hips: { type: number }
        neck: { type: number }
        arm: { type: number }
        under_bust: { type: number }
        thighs: { type: number }
        knees: { type: number }
        ankles: { type: number }
        notes: { type: string }
    UserGoalRequest:
      type: object
      required: [goal_type, target_value, target_date]
      properties:
        goal_type:
          type: string
          description: e.g. weight_loss
        target_value:
          type: number
          description: Stored in kg
        target_date:
          type: string
          description: YYYY-MM-DD
    UpdateUserSettingsRequest:
      type: object
      properties:
        preferred_name: { type: string }
        tone: { type: string }
        preferred_weight_unit: { type: string, enum: [kg, lbs, st_lbs] }
        diet_preference: { type: string }
        food_allergies: { type: string }
        food_dislikes: { type: string }
        typical_day: { type: string }
        healthy_extra_a: { type: string }
        healthy_extra_b: { type: string }
        syn_limit: { type: number }
        target_weight: { type: number, description: Stored in kg }
        maintenance_mode_enabled: { type: boolean }

security:
  - bearerAuth: []

paths:
  /api/ping:
    get:
      operationId: ping
      summary: Health check (no auth)
      security: []   # public
      responses:
        "200":
          description: Alive
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: { type: string }
                  message: { type: string }
                  timestamp: { type: string, format: date-time }

  /api/log_meal:
    post:
      operationId: logMeal
      summary: Log a meal
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MealLogRequest"
      responses:
        "200":
          description: Meal logged
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiMessage"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/log_weight:
    post:
      operationId: logWeight
      summary: Log a weight entry
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WeightLogRequest"
      responses:
        "200":
          description: Weight logged
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiMessage"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/log_exercise:
    post:
      operationId: logExercise
      summary: Log an exercise session
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExerciseLogRequest"
      responses:
        "200":
          description: Exercise logged
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiMessage"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/log_measurements:
    post:
      operationId: logMeasurements
      summary: Log body measurements
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MeasurementsLogRequest"
      responses:
        "200":
          description: Measurements logged
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiMessage"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/user_goals:
    post:
      operationId: setUserGoal
      summary: Create a user goal
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserGoalRequest"
      responses:
        "200":
          description: Goal saved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiMessage"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/update_user_settings:
    patch:
      operationId: updateUserSettings
      summary: Update user settings (upsert)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserSettingsRequest"
      responses:
        "200":
          description: Settings saved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiMessage"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/update_food_value:
    post:
      operationId: updateFoodValue
      summary: Add or update a food Syn value
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [food_name, syn_value]
              properties:
                date: { type: string }
                food_name: { type: string }
                syn_value: { type: number }
                notes: { type: string }
      responses:
        "200":
          description: Syn value saved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiMessage"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/weight_graph:
    get:
      operationId: getWeightGraph
      summary: Get recent weight data points for charting
      parameters:
        - in: query
          name: range
          required: false
          schema:
            type: string
            enum: [7d, 30d, 90d, 1y, all]
          description: Optional time range
      responses:
        "200":
          description: Data points
          content:
            application/json:
              schema:
                type: object
                properties:
                  user_id: { type: string }
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        date: { type: string }
                        weight: { type: number }
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/user_profile:
    get:
      operationId: getUserProfile
      summary: Get current user profile (just user_id)
      responses:
        "200":
          description: Current authenticated user
          content:
            application/json:
              schema:
                type: object
                properties:
                  user_id: { type: string }
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
