openapi: 3.1.1
info:
  title: SlimBuddy API
  version: 1.0.0
  description: >
    SlimBuddy backend. All authenticated routes require an Authorization header
    ("Bearer <token>"). Dates may be provided as DD/MM/YYYY or DD-MM-YYYY and are
    normalized server-side.

servers:
  - url: https://slimbuddy-backend-production.up.railway.app

components:
  schemas:
    SimpleOk:
      type: object
      properties:
        ok: { type: boolean }
        message: { type: string }

    EchoResponse:
      type: object
      properties:
        ok: { type: boolean }
        user:
          type: object
          properties:
            id: { type: string }
            email: { type: string, nullable: true }

    LogMealRequest:
      type: object
      additionalProperties: false
      properties:
        date: { type: string, description: "YYYY-MM-DD or UK format; server normalizes" }
        meal_type: { type: string, nullable: true }
        meal_description: { type: string }
        syns: { type: number, description: "Syns, will be rounded to nearest 0.5" }
        calories: { type: number, nullable: true }
        healthy_extra_a_used: { type: boolean, nullable: true }
        healthy_extra_b_used: { type: boolean, nullable: true }
        notes: { type: string, nullable: true }
      required: [meal_description, syns]

    LogWeightRequest:
      type: object
      additionalProperties: false
      properties:
        date: { type: string, description: "YYYY-MM-DD or UK format; server normalizes" }
        weight: { type: number, description: "If unit=kg, this is kilograms" }
        unit: { type: string, enum: [kg, lbs, st_lbs] }
        stones: { type: number, nullable: true, description: "Used when unit=st_lbs" }
        pounds: { type: number, nullable: true, description: "Used when unit=st_lbs" }
        notes: { type: string, nullable: true }
      required: [unit]

    LogExerciseRequest:
      type: object
      additionalProperties: false
      properties:
        date: { type: string, description: "YYYY-MM-DD or UK format; server normalizes" }
        activity: { type: string }
        duration_minutes: { type: integer, nullable: true }
        intensity: { type: string, nullable: true }
        calories_burned: { type: number, nullable: true }
        steps: { type: integer, nullable: true }
        distance_km: { type: number, nullable: true }
        notes: { type: string, nullable: true }
      required: [activity]

    LogMeasurementsRequest:
      type: object
      additionalProperties: false
      properties:
        date: { type: string, description: "YYYY-MM-DD or UK format; server normalizes" }
        bust: { type: number, nullable: true }
        waist: { type: number, nullable: true }
        hips: { type: number, nullable: true }
        thighs: { type: number, nullable: true }
        neck: { type: number, nullable: true }
        arm: { type: number, nullable: true }
        under_bust: { type: number, nullable: true }
        knees: { type: number, nullable: true }
        ankles: { type: number, nullable: true }
        notes: { type: string, nullable: true }

    UserGoalRequest:
      type: object
      additionalProperties: false
      properties:
        goal_type: { type: string, description: "e.g. weight_loss or maintenance" }
        target_value: { type: number, description: "Stored as kg" }
        target_date: { type: string, description: "YYYY-MM-DD or UK format" }
      required: [goal_type, target_value, target_date]

    UpdateUserSettingsRequest:
      type: object
      additionalProperties: false
      properties:
        preferred_name: { type: string, nullable: true }
        tone: { type: string, nullable: true }
        preferred_weight_unit: { type: string, enum: [st_lbs, kg, lbs], nullable: true }
        diet_preference: { type: string, nullable: true }
        food_allergies: { type: string, nullable: true }
        food_dislikes: { type: string, nullable: true }
        typical_day: { type: string, nullable: true }
        healthy_extra_a: { type: string, nullable: true }
        healthy_extra_b: { type: string, nullable: true }
        syn_limit: { type: number, nullable: true }
        target_weight: { type: number, nullable: true, description: "kg" }
        maintenance_mode_enabled: { type: boolean, nullable: true }

    UpdateFoodValueRequest:
      type: object
      additionalProperties: false
      properties:
        food_name: { type: string }
        syn_value: { type: number }
        notes: { type: string, nullable: true }
        date: { type: string, nullable: true, description: "YYYY-MM-DD or UK format" }
      required: [food_name, syn_value]

    WeightGraphResponse:
      type: object
      properties:
        user_id: { type: string }
        data:
          type: array
          items:
            type: object
            properties:
              date: { type: string }
              weight: { type: number }

  parameters:
    AuthorizationHeader:
      name: Authorization
      in: header
      required: true
      description: "Paste: Bearer <your SlimBuddy token>"
      schema:
        type: string
      x-openai-is-secret: true

paths:
  /api/ping:
    get:
      operationId: ping
      summary: Health check
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/SimpleOk' }

  /api/auth_echo:
    get:
      operationId: authEcho
      summary: Echo authenticated user (debug)
      parameters:
        - $ref: '#/components/parameters/AuthorizationHeader'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/EchoResponse' }
        '401': { description: Unauthorized }

  /api/log_meal:
    post:
      operationId: logMeal
      summary: Log a meal with Syns
      parameters:
        - $ref: '#/components/parameters/AuthorizationHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/LogMealRequest' }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/SimpleOk' }
        '400': { description: Bad request }
        '401': { description: Unauthorized }
        '500': { description: Server error }

  /api/log_weight:
    post:
      operationId: logWeight
      summary: Log a weight entry
      parameters:
        - $ref: '#/components/parameters/AuthorizationHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/LogWeightRequest' }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/SimpleOk' }
        '400': { description: Bad request }
        '401': { description: Unauthorized }
        '500': { description: Server error }

  /api/log_exercise:
    post:
      operationId: logExercise
      summary: Log an exercise session
      parameters:
        - $ref: '#/components/parameters/AuthorizationHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/LogExerciseRequest' }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/SimpleOk' }
        '400': { description: Bad request }
        '401': { description: Unauthorized }
        '500': { description: Server error }

  /api/log_measurements:
    post:
      operationId: logMeasurements
      summary: Log body measurements
      parameters:
        - $ref: '#/components/parameters/AuthorizationHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/LogMeasurementsRequest' }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/SimpleOk' }
        '400': { description: Bad request }
        '401': { description: Unauthorized }
        '500': { description: Server error }

  /api/user_goals:
    post:
      operationId: setUserGoal
      summary: Set a user goal
      parameters:
        - $ref: '#/components/parameters/AuthorizationHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/UserGoalRequest' }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/SimpleOk' }
        '400': { description: Bad request }
        '401': { description: Unauthorized }
        '500': { description: Server error }

  /api/update_user_settings:
    patch:
      operationId: updateUserSettings
      summary: Upsert user settings (only send fields that changed)
      parameters:
        - $ref: '#/components/parameters/AuthorizationHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/UpdateUserSettingsRequest' }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/SimpleOk' }
        '400': { description: Bad request }
        '401': { description: Unauthorized }
        '500': { description: Server error }

  /api/update_food_value:
    post:
      operationId: updateFoodValue
      summary: Save a user-specific Syn override
      parameters:
        - $ref: '#/components/parameters/AuthorizationHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/UpdateFoodValueRequest' }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/SimpleOk' }
        '400': { description: Bad request }
        '401': { description: Unauthorized }
        '500': { description: Server error }

  /api/weight_graph:
    get:
      operationId: getWeightGraph
      summary: Get weight history
      parameters:
        - $ref: '#/components/parameters/AuthorizationHeader'
        - name: range
          in: query
          required: false
          schema:
            type: string
            enum: [7d, 30d, 90d, 1y, all]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/WeightGraphResponse' }
        '401': { description: Unauthorized }

  /api/user_profile:
    get:
      operationId: getUserProfile
      summary: Get authenticated user_id
      parameters:
        - $ref: '#/components/parameters/AuthorizationHeader'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  user_id: { type: string }
        '401': { description: Unauthorized }
