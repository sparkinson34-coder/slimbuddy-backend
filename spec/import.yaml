openapi: 3.1.0
info:
  title: SlimBuddy Import Spec (Minimal, Full Coverage)
  version: 1.1.2
servers:
  - url: https://slimbuddy-backend-production.up.railway.app

components:
  securitySchemes:
    connectKeyAuth:
      type: apiKey
      in: header
      name: X-Connect-Key

security:
  - connectKeyAuth: []

paths:
  /api/ping:
    get:
      operationId: ping
      summary: Health check (no auth)
      security: []   # public
      responses:
        "200": { description: OK }

  /api/auth_echo:
    get:
      operationId: authEcho
      summary: Echo back resolved user (checks X-Connect-Key)
      responses:
        "200": { description: OK }

  /api/log_weight:
    post:
      operationId: logWeight
      summary: Log a weight entry
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [date, weight]
              properties:
                date:   { type: string, description: "YYYY-MM-DD" }
                weight: { type: number }
                unit:
                  type: string
                  description: "Optional. One of kg, lb, st_lbs. Defaults to 'kg'."
                  enum: [kg, lb, st_lbs]
                notes:  { type: string }
      responses:
        "200": { description: OK }

  /api/log_meal:
    post:
      operationId: logMeal
      summary: Log a meal (date optional; defaults to today)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [meal_description, syns]
              properties:
                date: { type: string, description: "YYYY-MM-DD (optional; defaults to today)" }
                meal_description: { type: string }
                syns: { type: number }
                calories: { type: number }
                healthy_extra_a_used: { type: boolean }
                healthy_extra_b_used: { type: boolean }
                notes: { type: string }
      responses:
        "200": { description: OK }

  /api/log_exercise:
    post:
      operationId: logExercise
      summary: Log exercise (date optional; defaults to today)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [activity]
              properties:
                date: { type: string, description: "YYYY-MM-DD (optional; defaults to today)" }
                activity: { type: string }
                duration_minutes: { type: integer }
                intensity: { type: string }
                calories_burned: { type: integer }
                steps: { type: integer }
                distance_km: { type: number }
                notes: { type: string }
      responses:
        "200": { description: OK }

  /api/log_measurements:
    post:
      operationId: logMeasurements
      summary: Log body measurements (date optional; defaults to today)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                date: { type: string, description: "YYYY-MM-DD (optional; defaults to today)" }
                bust: { type: number }
                waist: { type: number }
                hips: { type: number }
                thighs: { type: number }
                neck: { type: number }
                arm: { type: number }
                under_bust: { type: number }
                knees: { type: number }
                ankles: { type: number }
                notes: { type: string }
      responses:
        "200": { description: OK }

  /api/user_goals:
    post:
      operationId: setUserGoal
      summary: Create or update a user goal
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [goal_type, target_value]
              properties:
                goal_type:
                  type: string
                  enum: [weight_loss, maintain]
                target_value:
                  type: number
                  description: "Target in kg"
                target_date:
                  type: string
                  description: "YYYY-MM-DD (optional)"
      responses:
        "200": { description: OK }

  /api/update_user_settings:
    patch:
      operationId: updateUserSettings
      summary: Upsert user settings (send only fields that changed)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties:
                preferred_name: { type: string }
                tone: { type: string }
                preferred_weight_unit:
                  type: string
                  description: "st_lbs | kg | lb"
                  enum: [st_lbs, kg, lb]
                diet_preference: { type: string }
                food_allergies: { type: string }
                food_dislikes: { type: string }
                typical_day: { type: string }
                healthy_extra_a: { type: string }
                healthy_extra_b: { type: string }
                syn_limit: { type: integer }
                target_weight: { type: number, description: "kg" }
                maintenance_mode_enabled: { type: boolean }
      responses:
        "200": { description: OK }

  /api/update_food_value:
    post:
      operationId: updateFoodValue
      summary: Add or correct a food Syn value
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [food_name, syn_value]
              properties:
                food_name: { type: string }
                syn_value: { type: number }
                notes: { type: string }
                date: { type: string, description: "YYYY-MM-DD (optional)" }
      responses:
        "200": { description: OK }

  /api/weight_graph:
    get:
      operationId: getWeightGraph
      summary: Get weight graph data
      parameters:
        - in: query
          name: range
          required: false
          schema:
            type: string
            enum: [7d, 30d, 90d, 1y, all]
      responses:
        "200": { description: OK }

  /api/user_profile:
    get:
      operationId: getUserProfile
      summary: Get current user profile (user_id only)
      responses:
        "200": { description: OK }

  /api/reset:
    post:
      operationId: resetMyData
      summary: Delete all of my SlimBuddy data (profile, goals, logs)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [confirm]
              properties:
                confirm:
                  type: string
                  description: "Must be 'RESET'"
      responses:
        "200": { description: OK }
