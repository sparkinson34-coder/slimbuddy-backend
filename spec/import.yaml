openapi: 3.1.1
info:
  title: SlimBuddy API (GPT Import)
  version: 1.0.0
servers:
  - url: https://slimbuddy-backend-production.up.railway.app
components:
  parameters:
    AuthorizationHeader:
      name: Authorization
      in: header
      required: true
      description: "Paste: Bearer <your SlimBuddy token>"
      schema:
        type: string
      x-openai-is-secret: true
paths:
  /api/ping:
    get: { operationId: ping, responses: { '200': { description: OK } } }
  /api/auth_echo:
    get:
      operationId: authEcho
      parameters: [ { $ref: '#/components/parameters/AuthorizationHeader' } ]
      responses: { '200': { description: OK }, '401': { description: Unauthorized } }
  /api/log_weight:
    post:
      operationId: logWeight
      parameters: [ { $ref: '#/components/parameters/AuthorizationHeader' } ]
      requestBody:
        required: true
        content: { application/json: { schema: { type: object } } }
      responses: { '200': { description: OK }, '401': { description: Unauthorized } }
  /api/log_meal:
    post:
      operationId: logMeal
      parameters: [ { $ref: '#/components/parameters/AuthorizationHeader' } ]
      requestBody:
        required: true
        content: { application/json: { schema: { type: object } } }
      responses: { '200': { description: OK }, '401': { description: Unauthorized } }
  /api/log_exercise:
    post:
      operationId: logExercise
      parameters: [ { $ref: '#/components/parameters/AuthorizationHeader' } ]
      requestBody:
        required: true
        content: { application/json: { schema: { type: object } } }
      responses: { '200': { description: OK }, '401': { description: Unauthorized } }
  /api/log_measurements:
    post:
      operationId: logMeasurements
      parameters: [ { $ref: '#/components/parameters/AuthorizationHeader' } ]
      requestBody:
        required: true
        content: { application/json: { schema: { type: object } } }
      responses: { '200': { description: OK }, '401': { description: Unauthorized } }
  /api/user_goals:
    post:
      operationId: setUserGoal
      parameters: [ { $ref: '#/components/parameters/AuthorizationHeader' } ]
      requestBody:
        required: true
        content: { application/json: { schema: { type: object } } }
      responses: { '200': { description: OK }, '401': { description: Unauthorized } }
  /api/update_user_settings:
    patch:
      operationId: updateUserSettings
      parameters: [ { $ref: '#/components/parameters/AuthorizationHeader' } ]
      requestBody:
        required: true
        content: { application/json: { schema: { type: object } } }
      responses: { '200': { description: OK }, '401': { description: Unauthorized } }
  /api/update_food_value:
    post:
      operationId: updateFoodValue
      parameters: [ { $ref: '#/components/parameters/AuthorizationHeader' } ]
      requestBody:
        required: true
        content: { application/json: { schema: { type: object } } }
      responses: { '200': { description: OK }, '401': { description: Unauthorized } }
  /api/weight_graph:
    get:
      operationId: getWeightGraph
      parameters:
        - { $ref: '#/components/parameters/AuthorizationHeader' }
        - { name: range, in: query, schema: { type: string, enum: [7d, 30d, 90d, 1y, all] } }
      responses: { '200': { description: OK }, '401': { description: Unauthorized } }
  /api/user_profile:
    get:
      operationId: getUserProfile
      parameters: [ { $ref: '#/components/parameters/AuthorizationHeader' } ]
      responses: { '200': { description: OK }, '401': { description: Unauthorized } }
